# documentation: https://zou.cg-wire.com/
# slogan: Kitsu is a collaboration platform for animation and VFX studios.
# tags: production, collaboration, animation, VFX
# logo: svgs/kitsu.svg
# port: 80

# This file is adapted from the original docker-compose.yml located at:
#   https://github.com/EmberLightVFX/Kitsu-for-Docker
# Original Author:Ember Light, Apache License 2.0
# Modifications Copyright 2025, Kia Armani
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

services:
  kitsu:
    image: ghcr.io/emberlightvfx/kitsu-for-docker:latest
    depends_on:
      zou-app:
        condition: service_healthy
      zou-event:
        condition: service_healthy
      zou-jobs:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - SERVICE_FQDN_KITSU_80
      - PREVIEW_FOLDER=${PREVIEW_FOLDER:-/opt/zou/previews}
      - TMP_DIR=${TMP_DIR:-/tmp/zou}
      - DOMAIN_NAME=${DOMAIN_NAME:-${SERVICE_FQDN_KITSU_80}}
      - EVENT_STREAM_HOST=${EVENT_STREAM_HOST:-zou-event}
      - MEILI_MASTER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_HOST=${INDEXER_HOST:-meilisearch}
      - INDEXER_PORT=${INDEXER_PORT:-7700}
      - KV_HOST=${KV_HOST:-redis}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-SERVICE_PASSWORD_POSTGRES}
      - DB_DB=${DB_DB:-zoudb}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-zoudb}
      - SAML_ENABLED=${SAML_ENABLED}
      - SAML_IDP_NAME=${SAML_IDP_NAME}
      - SAML_METADATA_URL=${SAML_METADATA_URL}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  zou-app:
    image: ghcr.io/emberlightvfx/zou-for-docker:latest
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - 'previews:/opt/zou/previews'
      - 'tmp:/tmp/zou'
    restart: unless-stopped
    command: >
      sh -c "/init_zou.sh && /upgrade_zou.sh && gunicorn --error-logfile - --access-logfile - -w 3 -k gevent -b :5000 zou.app:app"
    environment:
      - PREVIEW_FOLDER=${PREVIEW_FOLDER:-/opt/zou/previews}
      - TMP_DIR=${TMP_DIR:-/tmp/zou}
      - DOMAIN_NAME=${DOMAIN_NAME:-${SERVICE_FQDN_KITSU_80}}
      - EVENT_STREAM_HOST=${EVENT_STREAM_HOST:-zou-event}
      - MEILI_MASTER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_HOST=${INDEXER_HOST:-meilisearch}
      - INDEXER_PORT=${INDEXER_PORT:-7700}
      - KV_HOST=${KV_HOST:-redis}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - DB_DB=${DB_DB:-zoudb}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-zoudb}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  zou-event:
    image: ghcr.io/emberlightvfx/zou-for-docker:latest
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - 'previews:/opt/zou/previews'
      - 'tmp:/tmp/zou'
    restart: unless-stopped
    command: >
      sh -c "gunicorn --error-logfile - --access-logfile - -w 1 -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker -b :5001 zou.event_stream:app"
    environment:
      - PREVIEW_FOLDER=${PREVIEW_FOLDER:-/opt/zou/previews}
      - TMP_DIR=${TMP_DIR:-/tmp/zou}
      - DOMAIN_NAME=${DOMAIN_NAME:-${SERVICE_FQDN_KITSU_80}}
      - EVENT_STREAM_HOST=${EVENT_STREAM_HOST:-zou-event}
      - MEILI_MASTER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_HOST=${INDEXER_HOST:-meilisearch}
      - INDEXER_PORT=${INDEXER_PORT:-7700}
      - KV_HOST=${KV_HOST:-redis}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - DB_DB=${DB_DB:-zoudb}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-zoudb}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5001"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  zou-jobs:
    image: ghcr.io/emberlightvfx/zou-for-docker:latest
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - 'previews:/opt/zou/previews'
      - 'tmp:/tmp/zou'
    restart: unless-stopped
    command: >
      sh -c "rq worker -c zou.job_settings"
    environment:
      - PREVIEW_FOLDER=${PREVIEW_FOLDER:-/opt/zou/previews}
      - TMP_DIR=${TMP_DIR:-/tmp/zou}
      - DOMAIN_NAME=${DOMAIN_NAME:-${SERVICE_FQDN_KITSU_80}}
      - EVENT_STREAM_HOST=${EVENT_STREAM_HOST:-zou-event}
      - MEILI_MASTER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
      - INDEXER_HOST=${INDEXER_HOST:-meilisearch}
      - INDEXER_PORT=${INDEXER_PORT:-7700}
      - KV_HOST=${KV_HOST:-redis}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - DB_DB=${DB_DB:-zoudb}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-zoudb}
    healthcheck:
      test: ["CMD", "pgrep", "-f", "rq worker"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  meilisearch:
    image: getmeili/meilisearch:v1.3.1
    volumes:
      - 'meili_data:/meili_data'
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${SERVICE_PASSWORD_MEILIMASTERKEY}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  db:
    image: postgres:12-alpine
    volumes:
      - 'db:/var/lib/postgresql/data'
      - ./db/pg_ctl.conf:/etc/postgresql/12/main/pg_ctl.conf:ro
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-zoudb}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:alpine
    volumes:
      - 'redis:/data'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
