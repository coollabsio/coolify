# documentation: https://trigger.dev
# slogan: The open source Background Jobs framework for TypeScript
# tags: trigger.dev, background jobs, typescript, trigger, jobs, cron, scheduler
# logo: svgs/trigger.png
# port: 3000


x-common-env: &common-env
  REMIX_APP_PORT: 3030
  NODE_ENV: production
  RUNTIME_PLATFORM: docker-compose
  V3_ENABLED: true
  TRIGGER_TELEMETRY_DISABLED: 1
  INTERNAL_OTEL_TRACE_DISABLED: 1
  INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
  POSTGRES_USER: $SERVICE_USER_POSTGRES
  POSTGRES_PASSWORD: $SERVICE_PASSWORD_POSTGRES
  POSTGRES_DB: ${POSTGRES_DB:-trigger}
  MAGIC_LINK_SECRET: $SERVICE_BASE64_MAGICLINK
  SESSION_SECRET: $SERVICE_BASE64_SESSION
  ENCRYPTION_KEY: $SERVICE_BASE64_ENCRYPTION
  PROVIDER_SECRET: $SERVICE_PASSWORD_64_PROVIDER
  COORDINATOR_SECRET: $SERVICE_PASSWORD_64_COORDINATOR
  DATABASE_HOST: postgresql:5432
  DATABASE_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  DIRECT_URL: postgres://$SERVICE_USER_POSTGRES:$SERVICE_PASSWORD_POSTGRES@postgresql:5432/$POSTGRES_DB?sslmode=disable
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_TLS_DISABLED: true
  COORDINATOR_HOST: 127.0.0.1
  COORDINATOR_PORT: 9020
  WHITELISTED_EMAILS: ""
  ADMIN_EMAILS: ""
  DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: 300
  DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: 100
  DEPLOY_REGISTRY_HOST: docker.io
  DEPLOY_REGISTRY_NAMESPACE: trigger
  REGISTRY_HOST: ${DEPLOY_REGISTRY_HOST}
  REGISTRY_NAMESPACE: ${DEPLOY_REGISTRY_NAMESPACE}
  AUTH_GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID}
  AUTH_GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET}
  RESEND_API_KEY: ${RESEND_API_KEY}
  FROM_EMAIL: ${FROM_EMAIL}
  REPLY_TO_EMAIL: ${REPLY_TO_EMAIL}
  LOGIN_ORIGIN: $SERVICE_FQDN_WEBAPP_3030
  APP_ORIGIN: $SERVICE_FQDN_WEBAPP_3030
  DEV_OTEL_EXPORTER_OTLP_ENDPOINT: $SERVICE_FQDN_WEBAPP_3030/otel
  OTEL_EXPORTER_OTLP_ENDPOINT: $SERVICE_FQDN_WEBAPP_3030/otel
  ELECTRIC_ORIGIN: http://electric:3000

services:
  webapp:
    image: ghcr.io/triggerdotdev/trigger.dev:v3
    environment:
      SERVICE_FQDN_WEBAPP_3030: ""
      <<: *common-env
    depends_on:
      - postgresql
      - redis
    restart: unless-stopped  
    healthcheck:
      test:
        - CMD
        - node
        - '-e'
        - "require('http').get('http://127.0.0.1:3030/healthcheck', (r) => {if (r.statusCode !== 200) process.exit(1); else process.exit(0); }).on('error', () => process.exit(1))"
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  electric:
    image: electricsql/electric
    restart: unless-stopped
    environment:
      <<: *common-env
    healthcheck:
      test: 'curl --fail http://127.0.0.1:3000/v1/health || exit 1'
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s
    depends_on:
      - postgresql  

  redis:
    image: 'redis:7'
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - 'redis-cli ping | grep PONG'
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - redis-data:/data
  postgresql:
    image: postgres:16-alpine
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      <<: *common-env
    command:
      - -c
      - wal_level=logical
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 20s
      retries: 10

  docker-provider:
    image: ghcr.io/triggerdotdev/provider/docker:v3
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test:
        - CMD
        - node
        - '-e'
        - "require('http').get('http://127.0.0.1:9020/health', (r) => {if (r.statusCode !== 200) process.exit(1); else process.exit(0); }).on('error', () => process.exit(1))"
      interval: 5s
    depends_on:
      - webapp    
    user: root
    environment:
      <<: *common-env
      PLATFORM_HOST: webapp
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: false
      PLATFORM_SECRET: $SERVICE_PASSWORD_64_PROVIDER
      FORCE_CHECKPOINT_SIMULATION: 0
      HTTP_SERVER_PORT: 9020
      ENFORCE_MACHINE_PRESETS: true
  coordinator:
    image: ghcr.io/triggerdotdev/coordinator:v3
    restart: unless-stopped
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test:
        - CMD
        - node
        - '-e'
        - "require('http').get('http://127.0.0.1:${HTTP_SERVER_PORT:-9020}/health', (r) => {if (r.statusCode !== 200) process.exit(1); else process.exit(0); }).on('error', () => process.exit(1))"
      interval: 5s
    ports:
      - '127.0.0.1:9020:9020'
    depends_on:
      - webapp
    environment:
      <<: *common-env
      PLATFORM_HOST: webapp
      PLATFORM_WS_PORT: 3030
      SECURE_CONNECTION: false
      PLATFORM_SECRET: $SERVICE_PASSWORD_64_COORDINATOR
      HTTP_SERVER_PORT: 9020
      FORCE_CHECKPOINT_SIMULATION: 0
